/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import DAO.SanPhamDAO;
import DTO.SanPhamDTO;
import com.mysql.cj.jdbc.Blob;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author Admin
 */
public class hienthisanpham extends javax.swing.JPanel {

    /**
     * Creates new form hienthisanpham
     */
    public hienthisanpham() {

        setLayout(new BorderLayout());

//        setPreferredSize(new Dimension(600, 400));
        
        try {
            // Lấy danh sách sản phẩm từ database
            SanPhamDAO productDAO = new SanPhamDAO();
            List<SanPhamDTO> products = productDAO.layDsSp("");

            // Panel hiển thị sản phẩm
            JPanel productPanel = new JPanel();
            productPanel.setLayout(new GridLayout(3, 3, 10, 10));

            for (SanPhamDTO product : products) {
                JPanel itemPanel = new JPanel();
                itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.Y_AXIS));
                itemPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));

                // Hình ảnh sản phẩm
                Blob imageBlob = product.getImage();
                BufferedImage image = null;
                if (imageBlob != null) {
                    byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
                    ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes);
                    image = ImageIO.read(bais); // Chuyển BLOB thành BufferedImage

                    // Chỉnh kích thước ảnh (ví dụ: 100x100 pixel)
                    Image scaledImage = image.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                    ImageIcon imageIcon = new ImageIcon(scaledImage); // Chuyển ảnh đã chỉnh kích thước thành ImageIcon

                    JLabel imageLabel = new JLabel(imageIcon);
                    imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                    itemPanel.add(imageLabel);
                } else {
                    JLabel noImageLabel = new JLabel("No Image Available");
                    noImageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                    itemPanel.add(noImageLabel);
                }

                // Tên sản phẩm
                JLabel nameLabel = new JLabel(product.getName());
                nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Giá sản phẩm
                JLabel priceLabel = new JLabel("$" + product.getPrice());
                priceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Bộ chọn số lượng
                JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(0, 0, 100, 1));
                quantitySpinner.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Nút "Add"
                JButton addButton = new JButton("Add");
                addButton.setAlignmentX(Component.CENTER_ALIGNMENT);
                addButton.addActionListener(e -> {
                    int quantity = (int) quantitySpinner.getValue();
                    if (quantity > 0) {
                        JOptionPane.showMessageDialog(null, "Successfully Added!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select a valid quantity!");
                    }
                });

                // Thêm vào itemPanel
                itemPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                itemPanel.add(nameLabel);
                itemPanel.add(priceLabel);
                itemPanel.add(quantitySpinner);
                itemPanel.add(addButton);

                productPanel.add(itemPanel);
            }

            JScrollPane scrollPane = new JScrollPane(productPanel);
//            scrollPane.setPreferredSize(new Dimension(600, 400));
            add(scrollPane, BorderLayout.CENTER);

        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading products: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.GridLayout());

        jPanel2.setLayout(new GridLayout(2,2));
        jPanel2.setLayout(new java.awt.GridLayout());

        jPanel3.setLayout(new java.awt.GridLayout());
        jPanel2.add(jPanel3);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
